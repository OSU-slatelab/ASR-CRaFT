#include "CRF_StdRange.h"

CRF_StdRange::CRF_StdRange(QNUInt32 nl, QNUInt32 nf)
	: nLabs(nl),
	  nFeas(nf)
{
	//this->rangeArray = new CRF_RangeNode*[nl];
	//this->rangeArray = new QNUInt32[nf];
	for (QNUInt32 i=0; i<nf; i++) {
		//this->rangeArray[i]=new CRF_RangeNode(0,this->nFeas-1,1);
		//this->rangeArray[i]=i;
		this->rangeVector.push_back(i);
	}
	// Standard feature count is numLabs*numFeas + numLabs (bias) + numlabs*numLabs (transition bias)
	this->numFtrs=this->nLabs*this->nFeas + this->nLabs + this->nLabs*this->nLabs;
	
}

CRF_StdRange::~CRF_StdRange()
{
	//for (QNUInt32 i=0; i<this->nLabs; i++) {
	//	delete this->rangeArray[i];
	//}
	//delete [] this->rangeArray;
	//delete this->rangeVector;
}

vector<QNUInt32> CRF_StdRange::getRange(QNUInt32 i)
{
	//return this->rangeArray;
	//return this->rangeArray[i];
	//return new CRF_RangeNode(0,this->nFeas-1,1);
	return this->rangeVector;
}

vector<QNUInt32> CRF_StdRange::getRange(QNUInt32 i, QNUInt32 j)
{
	return this->nullVector;
}

QNUInt32 CRF_StdRange::getNumFtrs()
{
	// Standard feature count is numLabs*numFeas + numLabs (bias) + numlabs*numLabs (transition bias)
	//return (this->nLabs*this->nFeas + this->nLabs + this->nLabs*this->nLabs);
	return this->numFtrs;
}
